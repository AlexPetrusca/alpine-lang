#ifndef AST_H#define AST_H#include <vector>#include "../lexer/token.h"class SyntaxTree {public:    enum Type {        Root,        BinaryOperator,        UnaryOperator,        Integer,        Identifier,        Expression,        Statement,        FunctionCall,        Arguements,    };    Token token;    Type type;    std::vector<SyntaxTree> children;    explicit SyntaxTree();    explicit SyntaxTree(Token value, Type type);    void add_child(const SyntaxTree &node);    [[nodiscard]] std::string to_string() const;    friend std::ostream &operator <<(std::ostream &os, const SyntaxTree &st);private:    [[nodiscard]] std::string to_string(int level) const;};#endif //AST_H